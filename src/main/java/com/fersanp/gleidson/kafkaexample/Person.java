/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.fersanp.gleidson.kafkaexample;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Person extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 8764304541634757486L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Person\",\"namespace\":\"com.fersanp.gleidson.kafkaexample\",\"fields\":[{\"name\":\"person_id\",\"type\":\"string\",\"doc\":\"Id of the person filed\"},{\"name\":\"first_name\",\"type\":\"string\",\"doc\":\"First Name\"},{\"name\":\"last_name\",\"type\":\"string\",\"doc\":\"Last Name\"},{\"name\":\"email\",\"type\":\"string\",\"doc\":\"Email of person\"}],\"version\":\"1\"}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Person> ENCODER =
      new BinaryMessageEncoder<Person>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Person> DECODER =
      new BinaryMessageDecoder<Person>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Person> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Person> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Person>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Person to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Person from a ByteBuffer. */
  public static Person fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Id of the person filed */
  @Deprecated public CharSequence person_id;
  /** First Name */
  @Deprecated public CharSequence first_name;
  /** Last Name */
  @Deprecated public CharSequence last_name;
  /** Email of person */
  @Deprecated public CharSequence email;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Person() {}

  /**
   * All-args constructor.
   * @param person_id Id of the person filed
   * @param first_name First Name
   * @param last_name Last Name
   * @param email Email of person
   */
  public Person(CharSequence person_id, CharSequence first_name, CharSequence last_name, CharSequence email) {
    this.person_id = person_id;
    this.first_name = first_name;
    this.last_name = last_name;
    this.email = email;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
    case 0: return person_id;
    case 1: return first_name;
    case 2: return last_name;
    case 3: return email;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: person_id = (CharSequence)value$; break;
    case 1: first_name = (CharSequence)value$; break;
    case 2: last_name = (CharSequence)value$; break;
    case 3: email = (CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'person_id' field.
   * @return Id of the person filed
   */
  public CharSequence getPersonId() {
    return person_id;
  }

  /**
   * Sets the value of the 'person_id' field.
   * Id of the person filed
   * @param value the value to set.
   */
  public void setPersonId(CharSequence value) {
    this.person_id = value;
  }

  /**
   * Gets the value of the 'first_name' field.
   * @return First Name
   */
  public CharSequence getFirstName() {
    return first_name;
  }

  /**
   * Sets the value of the 'first_name' field.
   * First Name
   * @param value the value to set.
   */
  public void setFirstName(CharSequence value) {
    this.first_name = value;
  }

  /**
   * Gets the value of the 'last_name' field.
   * @return Last Name
   */
  public CharSequence getLastName() {
    return last_name;
  }

  /**
   * Sets the value of the 'last_name' field.
   * Last Name
   * @param value the value to set.
   */
  public void setLastName(CharSequence value) {
    this.last_name = value;
  }

  /**
   * Gets the value of the 'email' field.
   * @return Email of person
   */
  public CharSequence getEmail() {
    return email;
  }

  /**
   * Sets the value of the 'email' field.
   * Email of person
   * @param value the value to set.
   */
  public void setEmail(CharSequence value) {
    this.email = value;
  }

  /**
   * Creates a new Person RecordBuilder.
   * @return A new Person RecordBuilder
   */
  public static Person.Builder newBuilder() {
    return new Person.Builder();
  }

  /**
   * Creates a new Person RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Person RecordBuilder
   */
  public static Person.Builder newBuilder(Person.Builder other) {
    return new Person.Builder(other);
  }

  /**
   * Creates a new Person RecordBuilder by copying an existing Person instance.
   * @param other The existing instance to copy.
   * @return A new Person RecordBuilder
   */
  public static Person.Builder newBuilder(Person other) {
    return new Person.Builder(other);
  }

  /**
   * RecordBuilder for Person instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Person>
    implements org.apache.avro.data.RecordBuilder<Person> {

    /** Id of the person filed */
    private CharSequence person_id;
    /** First Name */
    private CharSequence first_name;
    /** Last Name */
    private CharSequence last_name;
    /** Email of person */
    private CharSequence email;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(Person.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.person_id)) {
        this.person_id = data().deepCopy(fields()[0].schema(), other.person_id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.first_name)) {
        this.first_name = data().deepCopy(fields()[1].schema(), other.first_name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.last_name)) {
        this.last_name = data().deepCopy(fields()[2].schema(), other.last_name);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.email)) {
        this.email = data().deepCopy(fields()[3].schema(), other.email);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Person instance
     * @param other The existing instance to copy.
     */
    private Builder(Person other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.person_id)) {
        this.person_id = data().deepCopy(fields()[0].schema(), other.person_id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.first_name)) {
        this.first_name = data().deepCopy(fields()[1].schema(), other.first_name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.last_name)) {
        this.last_name = data().deepCopy(fields()[2].schema(), other.last_name);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.email)) {
        this.email = data().deepCopy(fields()[3].schema(), other.email);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'person_id' field.
      * Id of the person filed
      * @return The value.
      */
    public CharSequence getPersonId() {
      return person_id;
    }

    /**
      * Sets the value of the 'person_id' field.
      * Id of the person filed
      * @param value The value of 'person_id'.
      * @return This builder.
      */
    public Person.Builder setPersonId(CharSequence value) {
      validate(fields()[0], value);
      this.person_id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'person_id' field has been set.
      * Id of the person filed
      * @return True if the 'person_id' field has been set, false otherwise.
      */
    public boolean hasPersonId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'person_id' field.
      * Id of the person filed
      * @return This builder.
      */
    public Person.Builder clearPersonId() {
      person_id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'first_name' field.
      * First Name
      * @return The value.
      */
    public CharSequence getFirstName() {
      return first_name;
    }

    /**
      * Sets the value of the 'first_name' field.
      * First Name
      * @param value The value of 'first_name'.
      * @return This builder.
      */
    public Person.Builder setFirstName(CharSequence value) {
      validate(fields()[1], value);
      this.first_name = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'first_name' field has been set.
      * First Name
      * @return True if the 'first_name' field has been set, false otherwise.
      */
    public boolean hasFirstName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'first_name' field.
      * First Name
      * @return This builder.
      */
    public Person.Builder clearFirstName() {
      first_name = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'last_name' field.
      * Last Name
      * @return The value.
      */
    public CharSequence getLastName() {
      return last_name;
    }

    /**
      * Sets the value of the 'last_name' field.
      * Last Name
      * @param value The value of 'last_name'.
      * @return This builder.
      */
    public Person.Builder setLastName(CharSequence value) {
      validate(fields()[2], value);
      this.last_name = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'last_name' field has been set.
      * Last Name
      * @return True if the 'last_name' field has been set, false otherwise.
      */
    public boolean hasLastName() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'last_name' field.
      * Last Name
      * @return This builder.
      */
    public Person.Builder clearLastName() {
      last_name = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'email' field.
      * Email of person
      * @return The value.
      */
    public CharSequence getEmail() {
      return email;
    }

    /**
      * Sets the value of the 'email' field.
      * Email of person
      * @param value The value of 'email'.
      * @return This builder.
      */
    public Person.Builder setEmail(CharSequence value) {
      validate(fields()[3], value);
      this.email = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'email' field has been set.
      * Email of person
      * @return True if the 'email' field has been set, false otherwise.
      */
    public boolean hasEmail() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'email' field.
      * Email of person
      * @return This builder.
      */
    public Person.Builder clearEmail() {
      email = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Person build() {
      try {
        Person record = new Person();
        record.person_id = fieldSetFlags()[0] ? this.person_id : (CharSequence) defaultValue(fields()[0]);
        record.first_name = fieldSetFlags()[1] ? this.first_name : (CharSequence) defaultValue(fields()[1]);
        record.last_name = fieldSetFlags()[2] ? this.last_name : (CharSequence) defaultValue(fields()[2]);
        record.email = fieldSetFlags()[3] ? this.email : (CharSequence) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Person>
    WRITER$ = (org.apache.avro.io.DatumWriter<Person>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Person>
    READER$ = (org.apache.avro.io.DatumReader<Person>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
